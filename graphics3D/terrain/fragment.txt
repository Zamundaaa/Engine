
#include MaterialLayer

#ifndef MAX_LIGHTS
#define MAX_LIGHTS 0
#endif

#if MAX_LIGHTS > 0
#include PointLight
#endif

#ifndef useShadows
#define useShadows false
#endif

#if useShadows
#include ShadowMap
#endif

in vec3 norms;
in float material;

#if useShadows
in vec4 shadowCoords;
#endif

// point lights
#if MAX_LIGHTS > 0
in vec3 toLight[MAX_LIGHTS];
in vec3 dirToCam;

uniform int num_pointlights;
uniform PointLight pointlights[MAX_LIGHTS];
#endif

layout (location = 0) out vec4 out_Color;
#ifdef bloom
layout (location = 1) out vec4 out_BrightColor;
#endif

// sunlight
uniform vec3 sunDir = vec3(0, 1, 0);
uniform vec3 sunColor = vec3(1.0);
uniform float brightness;

#if useShadows
//uniform sampler2D shadowMap;
uniform ShadowMap shadowmap;
#endif

uniform MaterialLayer diffuse[5];

const float min_light = 0.1;

void main(){
	
	int i = int(material);
	vec4 t = getColor(vec2(0), diffuse[i]);
	out_Color = vec4(0.0, 0.0, 0.0, 1.0);
	// sunlight
	vec3 normNorms = normalize(norms);
	vec4 sunContrb = t;
#if useShadows
	// shadow=1 -> dark. shadow=0 -> light
	sunContrb.rgb *= sunColor * clamp(min(dot(sunDir, normNorms), 1.0 - getShadow(shadowmap, shadowCoords)), min_light, 1);
#else
	sunContrb.rgb *= sunColor * clamp(dot(sunDir, normNorms), min_light, 1);
#endif
	out_Color += sunContrb;
	
#ifdef bloom
	out_BrightColor = vec4(0);
#endif
	
#if MAX_LIGHTS > 0
	vec3 normDirToCam = normalize(dirToCam);
	for(int i = 0; i < MAX_LIGHTS; i++){//i < num_pointlights &&
		vec3 tol = normalize(toLight[i]);
		vec3 light = t.rgb * pointlights[i].color / (1 + dot(toLight[i], toLight[i]));
		out_Color.rgb += light;
#ifdef bloom
		
		out_BrightColor.rgb += light*0.1;
		
#endif
		//  - length(toLight[i])
		// * dot(normDirToCam, reflect(tol, normNorms))
	}
	
	/*
	vec3 c = vec3(3 * MAX_LIGHTS / 8.0, 0, 0);
	if(c.x > 1){
		c.y = c.x - 1;
		c.x = 0;
		if(c.y > 1){
			c.z = c.y-1;
			c.y = 0;
		}
	}
	out_Color = vec4(c, 1.0);
	*/
	
#endif

#if 0
	/*
	const int pcfCount = 2;
	const float totalTexels = (pcfCount * 2.0 + 1.0) * (pcfCount * 2.0 + 1.0);
	float texelSize = 1.0 / textureSize(shadowmap.tex, 0).x;
	float total = 0.0;
	
	for(int x = -pcfCount; x <= pcfCount; x++){
		for(int y = -pcfCount; y <= pcfCount; y++){
			float objectNearestLight = texture(shadowmap.tex, shadowCoords.xy + vec2(x, y) * texelSize).r;
			if(shadowCoords.z > objectNearestLight){
				total += 1.0;
			}
		}
	}
	total = total /  totalTexels;
	float lightFactor = 1.0 - (total);
	*/
	/*
	float objectNearestLight = texture(shadowmap.tex, shadowCoords.xy).r;
	float lightFactor = 1.0;
	if(shadowCoords.z > objectNearestLight)
		lightFactor = 1.0 - 0.4;
	
	out_Color *= lightFactor;
	*/
#endif
	
#ifdef bloom
	out_BrightColor += out_Color*brightness;
	out_BrightColor.a = 1.0;
#endif

#ifdef shownormals
	out_Color = vec4((norms+1.0)*0.5, 1.0);
#endif
	
}